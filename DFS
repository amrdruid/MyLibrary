#include <bits/stdc++.h>

using namespace std;

#define sz(x) ((int) (x).size())
#define mp make_pair
#define pb push_back
#define all(v) (v).begin( ), (v).end( )
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define I (1ll << 32)
double pi = 3.1415926536;
const int oo = (int) 1e9;
const long long OO = numeric_limits<long long>::max();

int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 };

int di[] = {0, 0, 1, -1, 1, -1, 1, -1};
int dj[] = {1, -1, 0, 0, 1, -1, -1, 1};

int f1[] = { 0, 0, 0, 1, 1, 1, -1, -1, -1 };
int f2[] = { -1, 0, 1, -1, 0, 1, -1, 0, 1 };

class Graph{
	int v;
	list<int>* adj;
	void DFSUtil(int v , bool visited[]);
	public:
Graph(int n);
	void DFS();
	void addEdge(int v, int w);
};

Graph :: Graph(int n){
	v = n;
	adj = new list<int>[n];
}

void Graph :: addEdge(int v , int w){
	adj[v].push_back(w);
}

void Graph :: DFSUtil(int v , bool visited[]){
	visited[v] = true;
	cout << v << " ";
	list<int>::iterator i;
	for(i = adj[v].begin() ; i != adj[v].end() ; i++){
		if(!visited[*i])
			DFSUtil(*i , visited);
	}
}

void Graph :: DFS(){
	bool *visited = new bool [v];
	for(int i = 0 ; i < v;  i++){
		visited[i] = false;
	}

	for(int i = 0 ; i < v ; i++){
		if(visited[i] == false){
			DFSUtil(i , visited);
			cout << endl;
		}
	}
}

int main() {
ios_base::sync_with_stdio(false);
//cin.tie(NULL);
//cout.tie(NULL);
//cout.setf(ios::fixed);
//freopen("input.txt","r",stdin);
//freopen("output.txt","w",stdout);

	int n , m;
	cout << "Enter the number of nodes : ";
	cin >> n;
	Graph g(n);
	cout << "Enter the number of connections : ";
	cin >> m;

	for(int i = 0 ; i < m ; i++){
		int x , y;
		cin >> x >> y;
		g.addEdge(x,y);
	}

	g.DFS();
}

